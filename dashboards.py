import streamlit as st
import plotly.graph_objects as go
import plotly.express as px
from utils.logger import log_info, log_error, log_debug
from utils.data_processor import (
    format_currency, 
    calculate_growth_rate, 
    get_trend_analysis,
    categorize_expenses
)
from data_loader import data_loader
from config import MENU_OPTIONS, CHART_COLORS, CURRENCY_SYMBOL
import pandas as pd

def show_metric_card(title, value, previous_value=None, prefix="", suffix=""):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º"""
    if previous_value:
        delta = calculate_growth_rate(value, previous_value)
        st.metric(
            title,
            f"{prefix}{format_currency(value, suffix)}",
            f"{delta:+.1f}%"
        )
    else:
        st.metric(title, f"{prefix}{format_currency(value, suffix)}")

def show_dashboard_page():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∞—à–±–æ—Ä–¥–∞"""
    st.title("üìä –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        net_worth_summary = data_loader.get_net_worth_summary()
        income_summary = data_loader.get_income_summary()
        expenses_summary = data_loader.get_expenses_summary()
        budget_comparison = data_loader.get_budget_vs_actual()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if any(x is None for x in [net_worth_summary, income_summary, expenses_summary]):
            st.warning("‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∫–∞–∂–¥–æ–º summary
        if not isinstance(net_worth_summary.get('history'), pd.DataFrame):
            st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —á–∏—Å—Ç–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
            return
            
        if net_worth_summary['history'].empty:
            st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —á–∏—Å—Ç–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
            return
            
        if income_summary['monthly_history'].empty or expenses_summary['monthly_history'].empty:
            st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Ö–æ–¥–∞—Ö –∏ —Ä–∞—Å—Ö–æ–¥–∞—Ö")
            return
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3 = st.columns(3)
        with col1:
            show_metric_card(
                "–ß–∏—Å—Ç–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å",
                net_worth_summary['current_net_worth'],
                suffix=CURRENCY_SYMBOL
            )
        with col2:
            show_metric_card(
                "–î–æ—Ö–æ–¥—ã (—Ç–µ–∫. –º–µ—Å—è—Ü)",
                income_summary['monthly_history'].iloc[-1],
                income_summary['monthly_history'].iloc[-2],
                suffix=CURRENCY_SYMBOL
            )
        with col3:
            show_metric_card(
                "–†–∞—Å—Ö–æ–¥—ã (—Ç–µ–∫. –º–µ—Å—è—Ü)",
                expenses_summary['monthly_history'].iloc[-1],
                expenses_summary['monthly_history'].iloc[-2],
                suffix=CURRENCY_SYMBOL
            )
        
        # –ì—Ä–∞—Ñ–∏–∫–∏
        col1, col2 = st.columns(2)
        
        with col1:
            show_mini_net_worth_chart(net_worth_summary['history'])
        with col2:
            show_mini_income_expenses_chart(
                income_summary['monthly_history'],
                expenses_summary['monthly_history']
            )
        
        col1, col2 = st.columns(2)
        with col1:
            show_mini_expense_breakdown(expenses_summary['by_category'])
        with col2:
            show_mini_budget_comparison(budget_comparison)
            
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞: {str(e)}")
        st.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞—à–±–æ—Ä–¥–∞")

def show_net_worth_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —á–∏—Å—Ç–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    st.title("üí∞ –ß–∏—Å—Ç–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å")
    
    try:
        net_worth_data = data_loader.get_net_worth_summary()
        if not net_worth_data:
            st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —á–∏—Å—Ç–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
            return
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3 = st.columns(3)
        with col1:
            show_metric_card(
                "–ß–∏—Å—Ç–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å",
                net_worth_data['current_net_worth'],
                suffix=CURRENCY_SYMBOL
            )
        with col2:
            show_metric_card(
                "–ê–∫—Ç–∏–≤—ã",
                net_worth_data['total_assets'],
                suffix=CURRENCY_SYMBOL
            )
        with col3:
            show_metric_card(
                "–û–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞",
                net_worth_data['total_liabilities'],
                suffix=CURRENCY_SYMBOL
            )
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
        show_detailed_net_worth_chart(net_worth_data['history'])
        
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–∏—Å—Ç–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {str(e)}")
        st.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")

def show_income_expenses_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    st.title("üíµ –î–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã")
    
    try:
        income_data = data_loader.get_income_summary()
        expenses_data = data_loader.get_expenses_summary()
        
        if not income_data or not expenses_data:
            st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Ö–æ–¥–∞—Ö –∏ —Ä–∞—Å—Ö–æ–¥–∞—Ö")
            return
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3 = st.columns(3)
        with col1:
            show_metric_card(
                "–û–±—â–∏–π –¥–æ—Ö–æ–¥",
                income_data['total_income'],
                suffix=CURRENCY_SYMBOL
            )
        with col2:
            show_metric_card(
                "–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã",
                expenses_data['total_expenses'],
                suffix=CURRENCY_SYMBOL
            )
        with col3:
            balance = income_data['total_income'] - expenses_data['total_expenses']
            show_metric_card(
                "–ë–∞–ª–∞–Ω—Å",
                balance,
                suffix=CURRENCY_SYMBOL
            )
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
        show_detailed_income_expenses_chart(
            income_data['monthly_history'],
            expenses_data['monthly_history']
        )
        
        # –†–∞–∑–±–∏–≤–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –¥–æ—Ö–æ–¥–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ä–∞—Å—Ö–æ–¥–æ–≤
        col1, col2 = st.columns(2)
        with col1:
            show_income_sources_chart(income_data['by_source'])
        with col2:
            show_expense_categories_chart(expenses_data['by_category'])
            
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤: {str(e)}")
        st.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")

def show_mini_net_worth_chart(df):
    """–ú–∏–Ω–∏-–≥—Ä–∞—Ñ–∏–∫ —á–∏—Å—Ç–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    st.subheader("üìà –î–∏–Ω–∞–º–∏–∫–∞ —á–∏—Å—Ç–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
    
    fig = go.Figure()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏–∏ –¥–ª—è –∞–∫—Ç–∏–≤–æ–≤, –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –∏ —á–∏—Å—Ç–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    fig.add_trace(go.Scatter(
        x=df['Date'],
        y=df['Assets'],
        name='–ê–∫—Ç–∏–≤—ã',
        line=dict(color=CHART_COLORS['assets'])
    ))
    
    fig.add_trace(go.Scatter(
        x=df['Date'],
        y=df['Liabilities'],
        name='–û–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞',
        line=dict(color=CHART_COLORS['liabilities'])
    ))
    
    fig.add_trace(go.Scatter(
        x=df['Date'],
        y=df['NetWorth'],
        name='–ß–∏—Å—Ç–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å',
        line=dict(color=CHART_COLORS['net_worth'])
    ))
    
    fig.update_layout(
        height=400,
        hovermode='x unified',
        showlegend=True,
        margin=dict(l=0, r=0, t=30, b=0)
    )
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    st.plotly_chart(fig, use_container_width=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    latest = df.iloc[-1]
    st.info(f"""
    **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ ({latest['Date'].strftime('%d.%m.%Y')}):**
    - –ê–∫—Ç–∏–≤—ã: {format_currency(latest['Assets'])}
    - –û–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: {format_currency(latest['Liabilities'])}
    - –ß–∏—Å—Ç–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {format_currency(latest['NetWorth'])}
        """)

def show_mini_income_expenses_chart(income_data, expenses_data):
    """–ú–∏–Ω–∏-–≥—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    st.subheader("üìä –î–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –º–µ—Å—è—Ü–∞–º")
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    df = pd.DataFrame({
        '–î–æ—Ö–æ–¥—ã': income_data,
        '–†–∞—Å—Ö–æ–¥—ã': expenses_data
    }).reset_index()
    df['Month'] = df['Month'].astype(str)
    
    fig = go.Figure()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
    fig.add_trace(go.Bar(
        x=df['Month'],
        y=df['–î–æ—Ö–æ–¥—ã'],
        name='–î–æ—Ö–æ–¥—ã',
        marker_color=CHART_COLORS['income']
    ))
    
    fig.add_trace(go.Bar(
        x=df['Month'],
        y=df['–†–∞—Å—Ö–æ–¥—ã'],
        name='–†–∞—Å—Ö–æ–¥—ã',
        marker_color=CHART_COLORS['expenses']
    ))
    
    fig.update_layout(
        height=400,
        barmode='group',
        hovermode='x unified',
        margin=dict(l=0, r=0, t=30, b=0)
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    selected_point = st.plotly_chart(fig, use_container_width=True)
    
    if selected_point:
        month = selected_point['points'][0]['x']
        row = df[df['Month'] == month].iloc[0]
        balance = row['–î–æ—Ö–æ–¥—ã'] - row['–†–∞—Å—Ö–æ–¥—ã']
        
        st.info(f"""
        **–î–µ—Ç–∞–ª–∏ –∑–∞ {month}:**
        - –î–æ—Ö–æ–¥—ã: {format_currency(row['–î–æ—Ö–æ–¥—ã'])}
        - –†–∞—Å—Ö–æ–¥—ã: {format_currency(row['–†–∞—Å—Ö–æ–¥—ã'])}
        - –ë–∞–ª–∞–Ω—Å: {format_currency(balance)}
        - –≠–∫–æ–Ω–æ–º–∏—è: {(balance/row['–î–æ—Ö–æ–¥—ã']*100):.1f}% –æ—Ç –¥–æ—Ö–æ–¥–∞
        """)

def show_mini_expense_breakdown(expenses_by_category):
    """–ú–∏–Ω–∏-–≥—Ä–∞—Ñ–∏–∫ —Ä–∞–∑–±–∏–≤–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    st.subheader("üçï –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–µ–ª–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    main_categories = categorize_expenses(expenses_by_category)
    
    fig = go.Figure(data=[go.Pie(
        labels=main_categories.index,
        values=main_categories.values,
        hole=.4,
        textinfo='percent+label'
    )])
    
    fig.update_layout(
        height=400,
        showlegend=False,
        margin=dict(l=0, r=0, t=30, b=0)
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    selected_point = st.plotly_chart(fig, use_container_width=True)
    
    if selected_point:
        category = selected_point['points'][0]['label']
        value = selected_point['points'][0]['value']
        percentage = selected_point['points'][0]['percent']
        
        st.info(f"""
        **–î–µ—Ç–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}":**
        - –°—É–º–º–∞: {format_currency(value)}
        - –î–æ–ª—è –≤ –æ–±—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–∞—Ö: {percentage:.1f}%
        """)

def show_mini_budget_comparison(budget_data):
    """–ú–∏–Ω–∏-–≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞ —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏"""
    st.subheader("üìã –ë—é–¥–∂–µ—Ç vs –§–∞–∫—Ç")
    
    fig = go.Figure()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –±—é–¥–∂–µ—Ç–∞ –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
    fig.add_trace(go.Bar(
        x=budget_data.index,
        y=budget_data['Budget'],
        name='–ë—é–¥–∂–µ—Ç',
        marker_color='rgba(46, 204, 113, 0.7)'
    ))
    
    fig.add_trace(go.Bar(
        x=budget_data.index,
        y=budget_data['Actual'],
        name='–§–∞–∫—Ç',
        marker_color='rgba(231, 76, 60, 0.7)'
    ))
    
    fig.update_layout(
        height=400,
        barmode='group',
        hovermode='x unified',
        margin=dict(l=0, r=0, t=30, b=0)
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    selected_point = st.plotly_chart(fig, use_container_width=True)
    
    if selected_point:
        category = selected_point['points'][0]['x']
        row = budget_data.loc[category]
        
        status = "‚úÖ –í —Ä–∞–º–∫–∞—Ö –±—é–¥–∂–µ—Ç–∞" if row['Actual'] <= row['Budget'] else "‚ùå –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞"
        
        st.info(f"""
        **–î–µ—Ç–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}":**
        - –ë—é–¥–∂–µ—Ç: {format_currency(row['Budget'])}
        - –§–∞–∫—Ç: {format_currency(row['Actual'])}
        - –†–∞–∑–Ω–∏—Ü–∞: {format_currency(row['Difference'])}
        - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {row['PercentUsed']:.1f}% –±—é–¥–∂–µ—Ç–∞
        - –°—Ç–∞—Ç—É—Å: {status}
        """)

def show_detailed_net_worth_chart(df):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —á–∏—Å—Ç–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    st.subheader("üìà –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–∏—Å—Ç–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–µ—Ä–∏–æ–¥–∞
    col1, col2 = st.columns(2)
    with col1:
        start_date = st.date_input(
            "–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞",
            value=df['Date'].min(),
            min_value=df['Date'].min(),
            max_value=df['Date'].max()
        )
    with col2:
        end_date = st.date_input(
            "–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞",
            value=df['Date'].max(),
            min_value=df['Date'].min(),
            max_value=df['Date'].max()
        )
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    mask = (df['Date'] >= pd.Timestamp(start_date)) & (df['Date'] <= pd.Timestamp(end_date))
    filtered_df = df[mask]
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig = go.Figure()
    
    fig.add_trace(go.Scatter(
        x=filtered_df['Date'],
        y=filtered_df['Assets'],
        name='–ê–∫—Ç–∏–≤—ã',
        fill='tonexty',
        line=dict(color=CHART_COLORS['assets'])
    ))
    
    fig.add_trace(go.Scatter(
        x=filtered_df['Date'],
        y=filtered_df['Liabilities'],
        name='–û–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞',
        fill='tonexty',
        line=dict(color=CHART_COLORS['liabilities'])
    ))
    
    fig.add_trace(go.Scatter(
        x=filtered_df['Date'],
        y=filtered_df['NetWorth'],
        name='–ß–∏—Å—Ç–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å',
        line=dict(color=CHART_COLORS['net_worth'], width=3)
    ))
    
    fig.update_layout(
        height=500,
        hovermode='x unified',
        showlegend=True,
        yaxis_title="–°—É–º–º–∞",
        xaxis_title="–î–∞—Ç–∞"
    )
    
    selected_point = st.plotly_chart(fig, use_container_width=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
    trend = get_trend_analysis(filtered_df['NetWorth'])
    if trend:
        st.info(f"""
        **–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞:**
        - –¢–µ–∫—É—â–∏–π —Ç—Ä–µ–Ω–¥: {trend['trend']}
        - –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {trend['growth_rate']:+.1f}%
        - –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {format_currency(trend['current'])}
        - –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {format_currency(trend['previous'])}
        """)

def show_detailed_income_expenses_chart(income_data, expenses_data):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤")
    
    try:
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        df = pd.DataFrame({
            '–î–æ—Ö–æ–¥—ã': income_data,
            '–†–∞—Å—Ö–æ–¥—ã': expenses_data
        }).reset_index()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Period –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        df['Month'] = df['Month'].astype(str)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–µ—Ä–∏–æ–¥–∞
        months = df['Month'].unique().tolist()
        col1, col2 = st.columns(2)
        with col1:
            start_month = st.selectbox(
                "–ù–∞—á–∞–ª—å–Ω—ã–π –º–µ—Å—è—Ü",
                options=months,
                index=0
            )
        with col2:
            end_month = st.selectbox(
                "–ö–æ–Ω–µ—á–Ω—ã–π –º–µ—Å—è—Ü",
                options=months,
                index=len(months)-1
            )
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        start_idx = months.index(start_month)
        end_idx = months.index(end_month)
        filtered_df = df.iloc[start_idx:end_idx+1]
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        fig = go.Figure()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏–∏ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
        fig.add_trace(go.Scatter(
            x=filtered_df['Month'],
            y=filtered_df['–î–æ—Ö–æ–¥—ã'],
            name='–î–æ—Ö–æ–¥—ã',
            line=dict(color=CHART_COLORS['income'], width=3)
        ))
        
        fig.add_trace(go.Scatter(
            x=filtered_df['Month'],
            y=filtered_df['–†–∞—Å—Ö–æ–¥—ã'],
            name='–†–∞—Å—Ö–æ–¥—ã',
            line=dict(color=CHART_COLORS['expenses'], width=3)
        ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –º–µ–∂–¥—É –¥–æ—Ö–æ–¥–∞–º–∏ –∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏
        fig.add_trace(go.Scatter(
            x=filtered_df['Month'],
            y=filtered_df['–î–æ—Ö–æ–¥—ã'] - filtered_df['–†–∞—Å—Ö–æ–¥—ã'],
            name='–ë–∞–ª–∞–Ω—Å',
            fill='tonexty',
            line=dict(color='rgba(0,100,0,0.3)')
        ))
        
        fig.update_layout(
            height=500,
            hovermode='x unified',
            showlegend=True,
            yaxis_title="–°—É–º–º–∞",
            xaxis_title="–ú–µ—Å—è—Ü"
        )
        
        selected_point = st.plotly_chart(fig, use_container_width=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            avg_income = filtered_df['–î–æ—Ö–æ–¥—ã'].mean()
            avg_expenses = filtered_df['–†–∞—Å—Ö–æ–¥—ã'].mean()
            st.metric(
                "–°—Ä–µ–¥–Ω–∏–π –º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥",
                format_currency(avg_income),
                f"{((filtered_df['–î–æ—Ö–æ–¥—ã'].iloc[-1] / avg_income - 1) * 100):+.1f}% –∫ —Å—Ä–µ–¥–Ω–µ–º—É"
            )
        
        with col2:
            st.metric(
                "–°—Ä–µ–¥–Ω–∏–µ –º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã",
                format_currency(avg_expenses),
                f"{((filtered_df['–†–∞—Å—Ö–æ–¥—ã'].iloc[-1] / avg_expenses - 1) * 100):+.1f}% –∫ —Å—Ä–µ–¥–Ω–µ–º—É"
            )
        
        with col3:
            savings_rate = ((filtered_df['–î–æ—Ö–æ–¥—ã'] - filtered_df['–†–∞—Å—Ö–æ–¥—ã']) / filtered_df['–î–æ—Ö–æ–¥—ã'] * 100).mean()
            st.metric("–°—Ä–µ–¥–Ω—è—è –Ω–æ—Ä–º–∞ —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π", f"{savings_rate:.1f}%")

    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤: {str(e)}")
        st.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")

def show_income_sources_chart(income_by_source):
    """–ì—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–æ—Ö–æ–¥–∞"""
    st.subheader("üí∞ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ—Ö–æ–¥–æ–≤")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–æ—Ö–æ–¥–∞
    income_by_source_sorted = income_by_source.sort_values(ascending=True)
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig = go.Figure(go.Bar(
        x=income_by_source_sorted.values,
        y=income_by_source_sorted.index,
        orientation='h',
        marker_color=CHART_COLORS['income']
    ))
    
    fig.update_layout(
        height=400,
        margin=dict(l=0, r=0, t=30, b=0),
        xaxis_title="–°—É–º–º–∞",
        yaxis_title="–ò—Å—Ç–æ—á–Ω–∏–∫"
    )
    
    selected_point = st.plotly_chart(fig, use_container_width=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑
    total_income = income_by_source.sum()
    st.info(f"""
    **–ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–æ—Ö–æ–¥–∞:**
    - –û–±—â–∏–π –¥–æ—Ö–æ–¥: {format_currency(total_income)}
    - –û—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫: {income_by_source.idxmax()} ({(income_by_source.max() / total_income * 100):.1f}% –æ—Ç –æ–±—â–µ–≥–æ –¥–æ—Ö–æ–¥–∞)
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(income_by_source)}
    """)

def show_expense_categories_chart(expenses_by_category):
    """–ì—Ä–∞—Ñ–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    st.subheader("üí∏ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–µ–ª–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    main_categories = categorize_expenses(expenses_by_category)
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
    fig = go.Figure(data=[go.Pie(
        labels=main_categories.index,
        values=main_categories.values,
        hole=.4,
        textinfo='percent+label',
        marker=dict(colors=px.colors.qualitative.Set3)
    )])
    
    fig.update_layout(
        height=500,
        showlegend=True,
        margin=dict(l=0, r=0, t=30, b=0)
    )
    
    selected_point = st.plotly_chart(fig, use_container_width=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑
    total_expenses = expenses_by_category.sum()
    st.info(f"""
    **–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤:**
    - –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {format_currency(total_expenses)}
    - –ö—Ä—É–ø–Ω–µ–π—à–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {expenses_by_category.idxmax()} ({(expenses_by_category.max() / total_expenses * 100):.1f}% –æ—Ç –æ–±—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤)
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(expenses_by_category)}
    """)

def show_expense_breakdown_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞–∑–±–∏–≤–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    st.title("üí∏ –†–∞–∑–±–∏–≤–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤")
    
    try:
        expenses_data = data_loader.get_expenses_summary()
        if expenses_data is None:
            st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö")
            return
            
        if expenses_data['by_category'].empty:
            st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤")
            return
            
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3 = st.columns(3)
        with col1:
            show_metric_card(
                "–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã",
                expenses_data['total_expenses'],
                suffix=CURRENCY_SYMBOL
            )
        with col2:
            show_metric_card(
                "–°—Ä–µ–¥–Ω–∏–µ –º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã",
                expenses_data['average_monthly'],
                suffix=CURRENCY_SYMBOL
            )
        with col3:
            if len(expenses_data['monthly_history']) >= 2:
                current_month = expenses_data['monthly_history'].iloc[-1]
                prev_month = expenses_data['monthly_history'].iloc[-2]
                show_metric_card(
                    "–†–∞—Å—Ö–æ–¥—ã –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ",
                    current_month,
                    prev_month,
                    suffix=CURRENCY_SYMBOL
                )
            else:
                show_metric_card(
                    "–†–∞—Å—Ö–æ–¥—ã –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ",
                    expenses_data['monthly_history'].iloc[-1],
                    suffix=CURRENCY_SYMBOL
                )
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
        show_expense_categories_chart(expenses_data['by_category'])
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º
        st.subheader("üìà –¢—Ä–µ–Ω–¥—ã —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º")
        show_detailed_expense_trends(expenses_data['monthly_history'])
        
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–∞—Å—Ö–æ–¥–æ–≤: {str(e)}")
        st.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")

def show_budget_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—é–¥–∂–µ—Ç–∞"""
    st.title("üìä –ë—é–¥–∂–µ—Ç")
    
    try:
        budget_data = data_loader.get_budget_vs_actual()
        if budget_data is None:
            st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±—é–¥–∂–µ—Ç–µ")
            return
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3 = st.columns(3)
        with col1:
            total_budget = budget_data['Budget'].sum()
            total_actual = budget_data['Actual'].sum()
            show_metric_card(
                "–û–±—â–∏–π –±—é–¥–∂–µ—Ç",
                total_budget,
                suffix=CURRENCY_SYMBOL
            )
        with col2:
            show_metric_card(
                "–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã",
                total_actual,
                suffix=CURRENCY_SYMBOL
            )
        with col3:
            budget_used = (total_actual / total_budget * 100)
            st.metric(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞",
                f"{budget_used:.1f}%",
                f"{100 - budget_used:.1f}% –æ—Å—Ç–∞–ª–æ—Å—å"
            )
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
        show_detailed_budget_comparison(budget_data)
        
        # –ê–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
        show_budget_variance_analysis(budget_data)
        
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—é–¥–∂–µ—Ç–∞: {str(e)}")
        st.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö")

def show_detailed_budget_comparison(budget_data):
    """–î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏"""
    st.subheader("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
    fig = go.Figure()
    
    fig.add_trace(go.Bar(
        name='–ë—é–¥–∂–µ—Ç',
        x=budget_data.index,
        y=budget_data['Budget'],
        marker_color='rgba(46, 204, 113, 0.7)'
    ))
    
    fig.add_trace(go.Bar(
        name='–§–∞–∫—Ç',
        x=budget_data.index,
        y=budget_data['Actual'],
        marker_color='rgba(231, 76, 60, 0.7)'
    ))
    
    fig.update_layout(
        barmode='group',
        height=500,
        margin=dict(l=0, r=0, t=30, b=0),
        xaxis_title="–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
        yaxis_title="–°—É–º–º–∞"
    )
    
    st.plotly_chart(fig, use_container_width=True)

def show_budget_variance_analysis(budget_data):
    """–ê–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –æ—Ç –±—é–¥–∂–µ—Ç–∞"""
    st.subheader("üìâ –ê–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π")
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    analysis = budget_data.copy()
    analysis['VariancePercent'] = (analysis['Actual'] - analysis['Budget']) / analysis['Budget'] * 100
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—é
    analysis = analysis.sort_values('VariancePercent', ascending=True)
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
    fig = go.Figure()
    
    colors = ['red' if x > 0 else 'green' for x in analysis['VariancePercent']]
    
    fig.add_trace(go.Bar(
        x=analysis.index,
        y=analysis['VariancePercent'],
        marker_color=colors
    ))
    
    fig.update_layout(
        height=400,
        margin=dict(l=0, r=0, t=30, b=0),
        xaxis_title="–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
        yaxis_title="–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (%)"
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    over_budget = analysis[analysis['VariancePercent'] > 0]
    under_budget = analysis[analysis['VariancePercent'] < 0]
    
    if not over_budget.empty:
        st.warning(f"""
        **–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞:**
        - {over_budget.index[0]}: +{over_budget['VariancePercent'].iloc[0]:.1f}%
        - {over_budget.index[1] if len(over_budget) > 1 else '–ù–µ—Ç'}: +{over_budget['VariancePercent'].iloc[1]:.1f}% (–µ—Å–ª–∏ –µ—Å—Ç—å)
        """)
    
    if not under_budget.empty:
        st.success(f"""
        **–≠–∫–æ–Ω–æ–º–∏—è –±—é–¥–∂–µ—Ç–∞:**
        - {under_budget.index[0]}: {under_budget['VariancePercent'].iloc[0]:.1f}%
        - {under_budget.index[1] if len(under_budget) > 1 else '–ù–µ—Ç'}: {under_budget['VariancePercent'].iloc[1]:.1f}% (–µ—Å–ª–∏ –µ—Å—Ç—å)
        """)

def show_detailed_expense_trends(monthly_expenses):
    """–ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–æ–≤ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º"""
    try:
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        df = monthly_expenses.reset_index()
        df['Month'] = df['Month'].astype(str)
        
        fig = go.Figure()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤
        fig.add_trace(go.Scatter(
            x=df['Month'],
            y=df['Amount'],
            name='–†–∞—Å—Ö–æ–¥—ã',
            line=dict(color=CHART_COLORS['expenses'], width=2)
        ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ
        rolling_mean = df['Amount'].rolling(window=3, min_periods=1).mean()
        fig.add_trace(go.Scatter(
            x=df['Month'],
            y=rolling_mean,
            name='–¢—Ä–µ–Ω–¥ (3 –º–µ—Å—è—Ü–∞)',
            line=dict(color='rgba(255, 165, 0, 0.7)', width=2, dash='dash')
        ))
        
        fig.update_layout(
            height=400,
            hovermode='x unified',
            showlegend=True,
            yaxis_title="–°—É–º–º–∞",
            xaxis_title="–ú–µ—Å—è—Ü"
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
        if len(df) >= 2:
            current = df['Amount'].iloc[-1]
            previous = df['Amount'].iloc[-2]
            change = ((current - previous) / previous * 100)
            
            if change > 0:
                st.warning(f"‚ö†Ô∏è –†–∞—Å—Ö–æ–¥—ã –≤—ã—Ä–æ—Å–ª–∏ –Ω–∞ {abs(change):.1f}% –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–æ—à–ª—ã–º –º–µ—Å—è—Ü–µ–º")
            elif change < 0:
                st.success(f"‚úÖ –†–∞—Å—Ö–æ–¥—ã —Å–Ω–∏–∑–∏–ª–∏—Å—å –Ω–∞ {abs(change):.1f}% –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–æ—à–ª—ã–º –º–µ—Å—è—Ü–µ–º")
            else:
                st.info("‚ÑπÔ∏è –†–∞—Å—Ö–æ–¥—ã –æ—Å—Ç–∞–ª–∏—Å—å –Ω–∞ —Ç–æ–º –∂–µ —É—Ä–æ–≤–Ω–µ")
                
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–æ–≤ —Ä–∞—Å—Ö–æ–¥–æ–≤: {str(e)}")
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç—Ä–µ–Ω–¥—ã —Ä–∞—Å—Ö–æ–¥–æ–≤")

# ... –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç ... 
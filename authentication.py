import streamlit as st
import yaml
from yaml.loader import SafeLoader
from pathlib import Path
import streamlit_authenticator as stauth
from utils.logger import log_info, log_error, log_warning
import re

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
CREDENTIALS_FILE = Path("credentials.yaml")

def is_valid_password(password):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è"""
    if len(password) < 8:
        return False, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤"
    if not re.search(r"[A-Z]", password):
        return False, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É"
    if not re.search(r"[a-z]", password):
        return False, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É"
    if not re.search(r"\d", password):
        return False, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É"
    return True, "–ü–∞—Ä–æ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"

def is_valid_username(username):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if len(username) < 3:
        return False, "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞"
    if not re.match(r"^[a-zA-Z0-9_]+$", username):
        return False, "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è"
    return True, "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"

def load_credentials():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
    if not CREDENTIALS_FILE.exists():
        default_credentials = {
            "usernames": {
                "admin": {
                    "name": "–ê–¥–º–∏–Ω",
                    "password": stauth.Hasher(['admin123']).generate()[0],
                    "email": "admin@example.com"
                }
            }
        }
        save_credentials(default_credentials)
        log_info("–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª credentials.yaml —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    with open(CREDENTIALS_FILE) as file:
        return yaml.load(file, Loader=SafeLoader)

def save_credentials(credentials):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
    with open(CREDENTIALS_FILE, "w") as file:
        yaml.dump(credentials, file)
    log_info("–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

def register_user():
    """–§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    st.subheader("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    with st.form("registration_form"):
        new_username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        new_name = st.text_input("–ü–æ–ª–Ω–æ–µ –∏–º—è")
        new_email = st.text_input("Email")
        new_password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
        confirm_password = st.text_input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", type="password")
        
        submitted = st.form_submit_button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
        
        if submitted:
            credentials = load_credentials()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
            username_valid, username_msg = is_valid_username(new_username)
            if not username_valid:
                st.error(username_msg)
                return
                
            if new_username in credentials["usernames"]:
                st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return
                
            password_valid, password_msg = is_valid_password(new_password)
            if not password_valid:
                st.error(password_msg)
                return
                
            if new_password != confirm_password:
                st.error("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                return
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            hashed_password = stauth.Hasher([new_password]).generate()[0]
            credentials["usernames"][new_username] = {
                "name": new_name,
                "password": hashed_password,
                "email": new_email
            }
            
            save_credentials(credentials)
            st.success("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
            log_info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {new_username}")

def reset_password():
    """–§–æ—Ä–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è"""
    st.subheader("üîë –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è")
    
    with st.form("reset_password_form"):
        username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        email = st.text_input("Email")
        new_password = st.text_input("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å", type="password")
        confirm_password = st.text_input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å", type="password")
        
        submitted = st.form_submit_button("–°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å")
        
        if submitted:
            credentials = load_credentials()
            
            if username not in credentials["usernames"]:
                st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            if credentials["usernames"][username]["email"] != email:
                st.error("–£–∫–∞–∑–∞–Ω–Ω—ã–π email –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏")
                return
                
            password_valid, password_msg = is_valid_password(new_password)
            if not password_valid:
                st.error(password_msg)
                return
                
            if new_password != confirm_password:
                st.error("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                return
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
            hashed_password = stauth.Hasher([new_password]).generate()[0]
            credentials["usernames"][username]["password"] = hashed_password
            
            save_credentials(credentials)
            st.success("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º.")
            log_info(f"–ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")

def show_auth_page():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    st.title("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    
    tab1, tab2, tab3 = st.tabs(["–í—Ö–æ–¥", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è"])
    
    with tab1:
        authenticator, name = authenticate_users()
        return authenticator, name
    
    with tab2:
        register_user()
    
    with tab3:
        reset_password()

def authenticate_users():
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    credentials = load_credentials()
    authenticator = stauth.Authenticate(
        credentials,
        "personal_finance_dashboard",
        "auth_cookie",
        cookie_expiry_days=30
    )
    
    name, authentication_status, username = authenticator.login("–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É", "main")
    
    if authentication_status:
        st.session_state.authenticated = True
        st.session_state.username = username
        log_info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É")
        return authenticator, name
    elif authentication_status == False:
        st.error("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
        log_warning(f"–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{username}'")
        return None, None
    elif authentication_status == None:
        st.info("üëã –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É")
        return None, None

def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    if st.session_state.get('authenticated'):
        username = st.session_state.get('username')
        st.session_state.authenticated = False
        st.session_state.username = None
        log_info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
        st.success("üëã –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
        st.rerun() 